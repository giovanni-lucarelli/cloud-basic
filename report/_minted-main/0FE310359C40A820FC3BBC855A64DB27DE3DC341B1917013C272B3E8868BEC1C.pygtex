\begin{Verbatim}[commandchars=\\\{\}]
\PYG{n+nt}{services}\PYG{p}{:}
\PYG{+w}{  }\PYG{c+c1}{\PYGZsh{} Define the services (containers) that make up the cluster.}

\PYG{+w}{  }\PYG{n+nt}{cluster01}\PYG{p}{:}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Build the Docker image for this service using the Dockerfile in the current directory (.).}
\PYG{+w}{    }\PYG{n+nt}{build}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{.}
\PYG{+w}{    }\PYG{n+nt}{container\PYGZus{}name}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{cluster01}

\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Set the hostname inside the container. Used for communication using hostnames}
\PYG{+w}{    }\PYG{n+nt}{hostname}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{cluster01}

\PYG{+w}{    }\PYG{n+nt}{networks}\PYG{p}{:}
\PYG{+w}{      }\PYG{c+c1}{\PYGZsh{} Connect this container to the \PYGZsq{}internal\PYGZhy{}net\PYGZsq{} defined below}
\PYG{+w}{      }\PYG{n+nt}{internal\PYGZhy{}net}\PYG{p}{:}

\PYG{+w}{    }\PYG{n+nt}{deploy}\PYG{p}{:}
\PYG{+w}{      }\PYG{c+c1}{\PYGZsh{} Define resources (CPU = 2, memory limits = 2GB)}
\PYG{+w}{      }\PYG{n+nt}{resources}\PYG{p}{:}
\PYG{+w}{        }\PYG{n+nt}{limits}\PYG{p}{:}
\PYG{+w}{          }\PYG{n+nt}{cpus}\PYG{p}{:}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2\PYGZdq{}}
\PYG{+w}{          }\PYG{n+nt}{memory}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{2G}

\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Map ports from the host machine to the container.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} allows to SSH into the container from the host using \PYGZsq{}ssh \PYGZhy{}p 2220 user@host\PYGZsq{}.}
\PYG{+w}{    }\PYG{n+nt}{ports}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2220:22\PYGZdq{}}

\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Mount shared volume into the container for sharing data.}
\PYG{+w}{    }\PYG{n+nt}{volumes}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{shared\PYGZhy{}data:/shared}

\PYG{+w}{  }\PYG{c+c1}{\PYGZsh{} Define the first worker/node service, configured similarly to cluster01.}
\PYG{+w}{  }\PYG{n+nt}{node01}\PYG{p}{:}
\PYG{+w}{    }\PYG{n+nt}{build}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{.}
\PYG{+w}{    }\PYG{n+nt}{container\PYGZus{}name}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{node01}
\PYG{+w}{    }\PYG{n+nt}{hostname}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{node01}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Specify that this container should be started after the \PYGZsq{}cluster01\PYGZsq{} service}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} to create a similar structure w.r.t. VMs}
\PYG{+w}{    }\PYG{n+nt}{depends\PYGZus{}on}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{cluster01}
\PYG{+w}{    }\PYG{n+nt}{networks}\PYG{p}{:}
\PYG{+w}{      }\PYG{n+nt}{internal\PYGZhy{}net}\PYG{p}{:}
\PYG{+w}{    }\PYG{n+nt}{deploy}\PYG{p}{:}
\PYG{+w}{      }\PYG{n+nt}{resources}\PYG{p}{:}
\PYG{+w}{        }\PYG{n+nt}{limits}\PYG{p}{:}
\PYG{+w}{          }\PYG{n+nt}{cpus}\PYG{p}{:}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2\PYGZdq{}}
\PYG{+w}{          }\PYG{n+nt}{memory}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{2G}
\PYG{+w}{    }\PYG{n+nt}{ports}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2221:22\PYGZdq{}}
\PYG{+w}{    }\PYG{n+nt}{volumes}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{shared\PYGZhy{}data:/shared}

\PYG{+w}{  }\PYG{c+c1}{\PYGZsh{} Define the second worker/node service, configured similarly.}
\PYG{+w}{  }\PYG{n+nt}{node02}\PYG{p}{:}
\PYG{+w}{    }\PYG{n+nt}{build}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{.}
\PYG{+w}{    }\PYG{n+nt}{container\PYGZus{}name}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{node02}
\PYG{+w}{    }\PYG{n+nt}{hostname}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{node02}
\PYG{+w}{    }\PYG{n+nt}{depends\PYGZus{}on}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{cluster01}
\PYG{+w}{    }\PYG{n+nt}{networks}\PYG{p}{:}
\PYG{+w}{      }\PYG{n+nt}{internal\PYGZhy{}net}\PYG{p}{:}
\PYG{+w}{    }\PYG{n+nt}{deploy}\PYG{p}{:}
\PYG{+w}{      }\PYG{n+nt}{resources}\PYG{p}{:}
\PYG{+w}{        }\PYG{n+nt}{limits}\PYG{p}{:}
\PYG{+w}{          }\PYG{n+nt}{cpus}\PYG{p}{:}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2\PYGZdq{}}
\PYG{+w}{          }\PYG{n+nt}{memory}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{2G}
\PYG{+w}{    }\PYG{n+nt}{ports}\PYG{p}{:}
\PYG{+w}{      }\PYG{c+c1}{\PYGZsh{} Map host port 2222 to port 22 inside this container.}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}2222:22\PYGZdq{}}
\PYG{+w}{    }\PYG{n+nt}{volumes}\PYG{p}{:}
\PYG{+w}{      }\PYG{p+pIndicator}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{shared\PYGZhy{}data:/shared}

\PYG{c+c1}{\PYGZsh{} Define the networks used by the services.}
\PYG{n+nt}{networks}\PYG{p}{:}
\PYG{+w}{  }\PYG{n+nt}{internal\PYGZhy{}net}\PYG{p}{:}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} \PYGZsq{}bridge\PYGZsq{} is the default and creates a private internal network on the host machine,}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} that allows containers on this network to communicate with each other using their hostnames}
\PYG{+w}{    }\PYG{n+nt}{driver}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{bridge}

\PYG{c+c1}{\PYGZsh{} Define the (shared) volume}
\PYG{n+nt}{volumes}\PYG{p}{:}
\PYG{+w}{  }\PYG{n+nt}{shared\PYGZhy{}data}\PYG{p}{:}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} Specify the volume driver. \PYGZsq{}local\PYGZsq{} is the default and stores the volume}
\PYG{+w}{    }\PYG{c+c1}{\PYGZsh{} data in a directory on the host machine managed by Docker.}
\PYG{+w}{    }\PYG{n+nt}{driver}\PYG{p}{:}\PYG{+w}{ }\PYG{l+lScalar+lScalarPlain}{local}
\end{Verbatim}
